#!/bin/sh
set -x
source ./custom.sh
[ "" == "$KEYMAP" ] || loadkeys $KEYMAP
case "$FS" in
	btrfs) ;;
	zfs)
		[ -d /mnt/gentoo/etc/zfs ] && mkdir --parents /mnt/gentoo/etc/zfs/; cp /etc/zfs/zpool.cache /mnt/gentoo/etc/zfs/zpool.cache
		SERVICES="$SERVICES zfs-mount zfs-share zfs-zed"
		case "$INIT" in
			openrc) SERVICES="zfs-import $SERVICES" ;;
			systemd) SERVICES="zfs.target zfs-import-cache $SERVICES zfs-import.target" ;;
		esac
		KERNEL_RAMDISKOPTS="$KERNEL_RAMDISKOPTS --zfs" 
		KERNEL_ZFS() {
			emerge sys-fs/zfs sys-fs/zfs-kmod
			sed -i 's/^.*CONFIG_GCC_PLUGIN_RANDSTRUCT.*$/# CONFIG_GCC_PLUGIN_RANDSTRUCT is not set/' /usr/src/linux/.config
			grep "^.*CONFIG_GCC_PLUGIN_RANDSTRUCT.*$" /usr/src/linux/.config
			sed -i 's/^.*CONFIG_CRYPTO_DEFLATE*$/CONFIG_CRYPTO_DEFLATE=y/' /usr/src/linux/.config
			grep "^.*CONFIG_CRYPTO_DEFLATE*$" /usr/src/linux/.config
			sed -i 's/^.*CONFIG_FORTIFY_SOURCE.*$/# CONFIG_FORTIFY_SOURCE is not set/' /usr/src/linux/.config
			grep "^.*CONFIG_FORTIFY_SOURCE.*$" /usr/src/linux/.config
			KERNEL_INSTALL --zfs&&emerge sys-fs/zfs sys-fs/zfs-kmod # ZFS needs to be reinstalled after every kernel compile.
			zgenhostid
		}
		KERNEL_POST_HOOK="$KERNEL_POST_HOOK KERNEL_ZFS;"
		KERNEL_PARAMS="$KERNEL_PARAMS dozfs=cache zfs=ZFS=$FS_ROOT rw"
		ZFS_CACHE() {
			[ -d /mnt/gentoo/etc/zfs/ ] || mkdir /mnt/gentoo/etc/zfs/;cp /etc/zfs/zpool.cache /mnt/gentoo/etc/zfs
		}
		CHROOT_PRE_HOOK="$CHROOT_PRE_HOOK ";;
esac
case "$INIT" in
	openrc);;
	systemd) grep '^USE=".*gnuefi' make.conf || (source ./make.conf;USE="$USE gnuefi";echo "$USE";sed -i "s/^USE.*$/USE=\"$USE\"/" make.conf)
		KERNEL_SYSTEMD() {
			sed -i 's/^.*CONFIG_GENTOO_LINUX_INIT_SYSTEMD.*$/CONFIG_GENTOO_LINUX_INIT_SYSTEMD=y/' /usr/src/linux/.config
			grep "CONFIG_GENTOO_LINUX_INIT_SYSTEMD" /usr/src/linux/.config
		} 
		KERNEL_PRE_HOOK="$KERNEL_PRE_HOOK KERNEL_SYSTEMD;"
		INIT_ADD() {
			systemctl enable $@
		};;
esac
bootstrap() { # Install and extractstage3 tarball.  Copy over config files.	
	latest_stage3=$(curl http://distfiles.gentoo.org/releases/amd64/autobuilds/latest-stage3.txt 2>/dev/null | grep -o ^.*stage3-amd64-systemd.*\.tar\.xz)
	ls | grep -o ^.*stage3-amd64-systemd.*\.tar\.xz || (wget http://distfiles.gentoo.org/releases/amd64/autobuilds/$latest_stage3 && time tar xpvf stage3-*.tar.xz --xattrs-include='*.*' --numeric-owner -C /mnt/gentoo > tar_log.txt&&echo 'tar output saved in "tar_log.txt"')
	[ -d "/mnt/gentoo/etc/portage/package.use/" ] && rm -rf /mnt/gentoo/etc/portage/package.use/
	cp package.use /mnt/gentoo/etc/portage/
	[ -f "/etc/portage/make.conf" ] && cp /etc/portage/make.conf /mnt/gentoo/etc/portage/make.conf.def
	grep '^USE="' /mnt/gentoo/etc/portage/make.conf || (mv /mnt/gentoo/etc/portage/make.conf{,.bak};cat ./make.conf >> /mnt/gentoo/etc/portage/make.conf;cat /mnt/gentoo/etc/portage/make.conf)
	cp {package.accept_keywords,package.license} /mnt/gentoo/etc/portage/
	mkdir --parents /mnt/gentoo/etc/portage/repos.conf
	cp /mnt/gentoo/usr/share/portage/config/repos.conf /mnt/gentoo/etc/portage/repos.conf/gentoo.conf
	cp --dereference /etc/resolv.conf /mnt/gentoo/etc/
}
mount_virtual() {  # Mount virtual file systems.
	cd /mnt/gentoo
	mount -t proc none proc
	mount --rbind /sys sys
	mount --make-rslave sys
	mount --rbind /dev dev
	mount --make-rslave dev
	test -L /dev/shm && rm /dev/shm && mkdir /dev/shm
	mount --types tmpfs --options nosuid,nodev,noexec shm /dev/shm
	chmod 1777 /dev/shm
}
setup_portage() {
	emerge-webrsync
	emerge --update --deep --newuse @world
}
locale() {
	[ "$HOSTNAME" == "" ] || ls /etc/conf.d/hostname || echo "$HOSTNAME" > /etc/conf.d/hostname;cat /etc/conf.d/hostname
	echo "$KEYMAP" > /etc/confd.keymaps;cat /etc/conf.d/keymaps
	echo "$LOCALE.UTF-8 UTF-8" > /etc/locale.gen;cat /etc/locale.gen
	locale-gen
	echo -e "LANG=\"$LOCALE.UTF-8\"\nLC_COLLATE=\"C\"" > /etc/env.d/02locale;cat/etc/env.d/02locale	
	source /etc/profile && env-update
}
fstab() { 
	emerge app-portage/layman dev-vcs/git
	layman -L
	yes | layman -a zscheile
	emerge asciidoc
	emerge --nodeps arch-install-scripts
	cp /etc/fstab{,.bak}&&cp /etc/fstab{./def}
	genfstab -U -p / > /etc/fstab;cat /etc/fstab&&echo 'fstab was not created'
}
kernel() { # Install kernel and initramfs.
	emerge sys-kernel/gentoo-sources sys-kernel/genkernel linux-firmware
	cd /usr/src/linux;make defconfig
	eval $KERNEL_PRE_HOOK
	KERNEL_INSTALL --no-zfs
	eval $KERNEL_POST_HOOK
	genkernel initramfs --makeopts=-j$CORES $KERNEL_RAMDISKOPTS
}
services() {
	emerge $TOOLS
	INIT_ADD $SERVICES
}
bootloader() {
	IMAGE=$(ls /boot/ | grep vmlinuz.*gentoo.*x86_64$)
	INITRAMFS=$(ls /boot/ | grep initramfs.*gentoo.*x86_64.img$)
	case "$BOOTLOADER" in
		grub2) echo 'Not supported, yet.';;
		efistub) mkdir --parents /boot/EFI/Gentoo/
			cp  /boot/$IMAGE /boot/EFI/Gentoo/bootx64.efi;cp /boot/$INITRAMFS /boot/EFI/Gentoo/initramfs
			efibootmgr --disk $EFI_DISK --part ${EFI_PARTITION: -1} --create --label "Gentoo" --loader "\EFI\Gentoo\bootx64.efi" --unicode $KERNEL_PARAMS ;;
		systemd-boot) bootctl --path=/boot install
			echo "title	Gentoo Linux
linux	/$IMAGE
initrd	/$INITRAMFS
options	$KERNEL_PARAMS" > /boot/loader/entries/gentoo.conf;cat /boot/loader/entries/gentoo.conf;;
	esac
}
password() {
	[ -eq "nil" "$SECURE_PASSWD" ] && sed 's/enforce=everyone/enforce=none/' /etc/security/passwdqc.conf;cat /etc/security/passwdqc.conf
	passwd
}
all() {
	bootstrap&&mount_virtual
	eval $CHROOT_PRE_HOOK
	echo 'source /etc/profile&&/usr/sbin/env-update;cd /root/gentoo-install-scripts/&&source ./install;setup_portage&&locale&&fstab&&kernel&&services&&bootloader' | env -i HOME=/root TERM=$TERM chroot /mnt/gentoo/ /bin/bash -s
	eval $CHROOT_POST_HOOK
}
while true; do
	case "$1" in
		--help ) echo 'Available optinos are (when using multiple optinos, use in following order):
--bootstrap	# Install tarball, setup initial root config files.
--mount_virtual # Mount virtual filesystems.
--setup_portage # Sync portage and update packages / install dependencies.
--locale
--fstab
--kernel
--services	# Install services and their package dependencies.
--bootloader
--all		# Ececute all previous options in order of appearence.'; break ;;
		--bootstrap ) bootstrap ; shift ;;
		--mount_virtual ) mount_virtual ; shift ;;
		--setup_portage ) setup_portage ; shift ;;
		--locale ) locale ; shift ;;
		--fstab ) fstab ; shift ;;
		--kernel ) kernel ; shift ;;
		--services ) services ; shift ;;
		--bootloader ) bootloader ; shift ;;
		--all ) all ; break ;;
		--) shift;break;;
		* ) break ;;
	esac
	shift
done
