#!/bin/sh
cd "${0%/*}"
source ./custom.sh
[ "" == "$KEYMAP" ] || loadkeys $KEYMAP

HELP='Available optinos are (when using multiple optinos, use in following order):
bootstrap	# Install tarball, setup initial root config files.
mount_virtual	# Mount virtual filesystems.
setup_portage	# Sync portage and update packages / install dependencies.
locale
fstab
kernel
services	# Install services and their package dependencies.
bootloader
all		# Ececute all previous options in order of appearence.'

ERROR(){ echo "$1";echo "$HELP";exit; }
AH() { eval "$1=\"\$$1 $2;\""; }
AP() { eval "$1=\"\$$1 $2\""; }
KY(){ sed -i "s/^.*$1[ =].*$/$1=y/" .config; }
KN(){ sed -i "s/^.*$1[ =].*$/# $1 is not set.=y/" .config; }

KI() { KVER=$(ls /lib/modules/ | grep "$(eselect kernel list | sed -n 's/^.*linux-\(.*\)\ \*$/\1/p')" | head -n 1)
 if [ "$KERNEL_INITRAMFS" == "dracut" ]; then; emerge dracut; dracut --hostonly --fstab /etc/fstab --kver $KVER
 else $GENKERNEL initramfs ; fi; }

KC(){ if [ "$KERNEL_CONFIG" == "" ]; then
  cd /usr/src/linux/
  make && make modules_install && make install
  emerge @module-rebuild; KI
 elif [ -f "$KERNEL_CONFIG" ]; then GENKERNEL
 else  ERROR "Not a file: $KERNEL_CONFIG"; }

[ "$FS" == "zfs" ] && {
 AP SERVICES 'zfs-mount zfs-share zfs-zed'
 case "$INIT" in
  openrc) AP SERVICES zfs-import ;;
  systemd) AP SERVICES "zfs.target zfs-import-cache zfs-import.target" ;;
 esac
 AP KERNEL_RAMDISKOPTS '--zfs' 
 KERNEL_ZFS(){ emerge sys-fs/zfs sys-fs/zfs-kmod
  cd /usr/src/linux
  KN CONFIG_GCC_PLUGIN_RANDSTRUCT; KY CONFIG_CRYPTO_DEFLATE; KN CONFIG_FORTIFY_SOURCE
  zgenhostid
  A GENKERNEL "--zfs"; KI; }
 AH KERNEL_POST_HOOK 'KERNEL_ZFS'
 AP KERNEL_PARAMS "dozfs=cache zfs=ZFS=$FS_ROOT rw"
 ZFS_CACHE(){ [ -d /mnt/gentoo/etc/zfs/ ] || mkdir /mnt/gentoo/etc/zfs/; cp {,/mnt}/etc/zfs/zpool.cache; }
 AH BOOTSTRAP_POST_HOOK ZFS_CACHE; }

[ "$INIT" == "systemd" ] && {
 grep '^USE=".*gnuefi' make.conf || { source ./make.conf; USE="$USE gnuefi"; echo "$USE"; sed -i "s/^USE.*$/USE=\"$USE\"/" make.conf; }
 KERNEL_SYSTEMD() { KY CONFIG_GENTOO_LINUX_INIT_SYSTEMD ; }; AH KERNEL_PRE_HOOK 'KERNEL_SYSTEMD'
 INIT_ADD(){ systemctl enable $@; }; }

bootstrap(){ latest_stage3=$(curl http://distfiles.gentoo.org/releases/amd64/autobuilds/latest-stage3.txt 2>/dev/null |
  grep -o ^.*stage3-amd64-systemd.*\.tar\.xz)
 ls | grep -o ^.*stage3-amd64-systemd.*\.tar\.xz ||
  { wget http://distfiles.gentoo.org/releases/amd64/autobuilds/$latest_stage3 &&
   time tar xpf stage3-*.tar.xz --xattrs-include='*.*' --numeric-owner -C /mnt/gentoo; }
 cd /mnt/gentoo/etc/portage
 [ -d "package.use" ] && rm -rf package.use
 [ -d "package.mask" ] && rm -rf package.mask
 cp $W/package.use .
 [ -f "/etc/portage/make.conf" ] && cp /etc/portage/make.conf make.conf.def
 grep '^USE="' make.conf || { mv make.conf{,.bak}; cat ./make.conf >> make.conf; }
 cp {package.accept_keywords,package.license} 
 mkdir --parents repos.conf
 cp /mnt/gentoo/usr/share/portage/config/repos.conf repos.conf/gentoo.conf
 cp --dereference /etc/resolv.conf /mnt/gentoo/etc/
 eval $BOOTSTRAP_POST_HOOK; }

mountVirtual(){ cd /mnt/gentoo
 mount -t proc none proc
 mount --rbind /sys sys; mount --make-rslave sys
 mount --rbind /dev dev; mount --make-rslave dev; }

setupPortage(){ cd /etc/portage
 grep 'CHOST=' make.conf || { sed -i '/COMMON_FLAGS=\"/i CHOST="x86_64-pc-linux-gnu"' make.conf; }
 grep '-march=' make.conf || { sed -i "s/\(COMMON_FLAGS=\"\)/\1-march=${MARCH} /" make.conf; }
 emerge-webrsync; emerge --update --deep --newuse @world cpuid2cpuflags
 grep 'CPU_FLAGS_X86=' make.conf || { sed -i "/COMMON_FLAGS=/a $(cpuid2cpuflags)" make.conf; }; }

locale(){ [ "$INiT" == "ystemd" ] && F=/etc/hostname || F=/etc/conf.d/hostname
 echo "hostname=\"$HOSTNAME\"" > $F
 echo "$KEYMAP" > /etc/confd.keymaps
 echo "$LOCALE.UTF-8 UTF-8" > /etc/locale.gen
 locale-gen
 echo -e "LANG=\"$LOCALE.UTF-8\"\nLC_COLLATE=\"C\"" > /etc/env.d/02locale
 source /etc/profile && env-update; }

fstab(){ cd /etc
 cp -f fstab{,.bak} && [ -f fstab.def ] || cp fstab{,.def}
 genfstab -U / > fstab
 [ "$PORTAGE_TMPFS" ] && echo "tmpfs	/var/tmp/portage	tmpfs size=${PORTAGE_TMPFS},uid=portage,gid=portage,mode=775,noatime" >> fstab; }

kernel(){ emerge sys-kernel/gentoo-sources sys-kernel/genkernel linux-firmware
 cd /usr/src/linux; make defconfig
 eval $KERNEL_PRE_HOOK; KI; eval $KERNEL_POST_HOOK; }

services() { emerge $TOOLS; INIT_ADD $SERVICES; }

bootloader() { IMAGE=$(ls /boot/ | grep vmlinuz.*gentoo.*x86_64$)
 INITRAMFS=$(ls /boot/ | grep initramfs.*gentoo.*x86_64.img$)
 case "$BOOTLOADER" in
  efistub) mkdir --parents /boot/EFI/Gentoo/
   cp /boot/$IMAGE /boot/EFI/Gentoo/bootx64.efi;cp /boot/$INITRAMFS /boot/EFI/Gentoo/initramfs
   efibootmgr --disk $EFI_DISK --part ${EFI_PARTITION: -1} --create --label "Gentoo" --loader "\EFI\Gentoo\bootx64.efi" --unicode $KERNEL_PARAMS ;;
  systemd-boot) bootctl --path=/boot install
   echo "title Gentoo Linux
linux $IMAGE
initrd $INITRAMFS
options $KERNEL_PARAMS" > /boot/loader/entries/gentoo.conf;;
 esac; }

password() { [ -eq "nil" "$SECURE_PASSWD" ] && sed 's/enforce=everyone/enforce=none/' /etc/security/passwdqc.conf
 passwd; }

all() { bootstrap; mount_virtual
 echo 'source /etc/profile;  /usr/sbin/env-update
/root/gentoo-install-scripts/install setup-portage locale fstab kernel services bootloader' |
 env -i HOME=/root TERM=$TERM chroot /mnt/gentoo/ /bin/bash -s; }

while true; do
 case "$1" in
  help ) echo $HELP; exit ;;
  bootstrap ) bootstrap;;
  mount-virtual ) mountVirtual;;
  setup-portage ) setupPortage;;
  locale ) locale;;
  fstab ) fstab;;
  kernel ) kernel;;
  services ) services;;
  bootloader ) bootloader;;
  all ) all;;
  * ) exit;;
 esac
 shift
done
